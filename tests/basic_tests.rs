use rsparse;
mod utils;

#[test]
fn from_vec_1() {
    let a = vec![vec![0., 0., 2.], vec![1., 0., 0.], vec![9., 9., 9.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);
    // Checking data
    assert_eq!(a_sparse.x, vec![1., 9., 9., 2., 9.]);
    // Checking indices
    assert_eq!(a_sparse.i, vec![1, 2, 2, 0, 2]);
    // Checking indptr
    assert_eq!(a_sparse.p, vec![0, 2, 3, 5]);
}

#[test]
fn from_triplet_1() {
    let a = rsparse::data::Trpl{ // make simple diagonal matrix
        m: 3,
        n: 3,
        p: vec![0, 1, 2],
        i: vec![0, 1, 2],
        x: vec![2., 3., 4.]
    };
    let mut b = rsparse::data::Sprs::new();
    b.from_triplet(&a);

    assert_eq!(b.todense(), vec![vec![2., 0., 0.], vec![0., 3., 0.], vec![0., 0., 4.]]);
}

#[test]
fn from_triplet_2() {
    let a = rsparse::data::Trpl{
        m: 3,
        n: 4,
        p: vec![0, 1, 2, 0],
        i: vec![0, 1, 2, 1],
        x: vec![2., 3., 4., 5.]
    };
    let mut b = rsparse::data::Sprs::new();
    b.from_triplet(&a);

    assert_eq!(b.todense(), vec![vec![2., 0., 0., 0.], vec![5., 3., 0., 0.], vec![0., 0., 4., 0.]]);
}

#[test]
fn from_triplet_3() {
    let a = rsparse::data::Trpl{
        m: 3,
        n: 4,
        p: vec![0, 1, 2, 0, 3, 3],
        i: vec![0, 1, 2, 1, 2, 2],
        x: vec![2., 3., 4., 5., 6., 7.]
    };
    let mut b = rsparse::data::Sprs::new();
    b.from_triplet(&a);

    assert_eq!(b.todense(), vec![vec![2., 0., 0., 0.], vec![5., 3., 0., 0.], vec![0., 0., 4., 7.]]);
}

#[test]
fn from_triplet_4() {
    let mut a = rsparse::data::Trpl{
        m: 3,
        n: 4,
        p: vec![0, 1, 2, 0, 3, 3],
        i: vec![0, 1, 2, 1, 2, 2],
        x: vec![2., 3., 4., 5., 6., 7.]
    };
    a.sum_dupl();
    let mut b = rsparse::data::Sprs::new();
    b.from_triplet(&a);

    assert_eq!(b.todense(), vec![vec![2., 0., 0., 0.], vec![5., 3., 0., 0.], vec![0., 0., 4., 13.]]);
}

#[test]
fn from_triplet_5() {
    let mut a = rsparse::data::Trpl{
        m: 3,
        n: 4,
        p: vec![0, 1, 2, 0, 3, 3],
        i: vec![0, 1, 2, 1, 2, 2],
        x: vec![2., 3., 4., 5., 6., 7.]
    };
    for _ in 0..10 {
        a.sum_dupl();
    }
    let mut b = rsparse::data::Sprs::new();
    b.from_triplet(&a);

    assert_eq!(b.todense(), vec![vec![2., 0., 0., 0.], vec![5., 3., 0., 0.], vec![0., 0., 4., 13.]]);
}

#[test]
fn get_1() {
    let a = vec![
        vec![92., 99., 1., 8., 15., 67., 74., 51., 58., 40.],
        vec![98., 80., 7., 14., 16., 73., 55., 57., 64., 41.],
        vec![4., 81., 88., 20., 22., 54., 56., 63., 70., 47.],
        vec![85., 87., 19., 21., 3., 60., 62., 69., 71., 28.],
        vec![86., 93., 25., 2., 9., 61., 68., 75., 52., 34.],
        vec![17., 24., 76., 83., 90., 42., 49., 26., 33., 65.],
        vec![23., 5., 82., 89., 91., 48., 30., 32., 39., 66.],
        vec![79., 6., 13., 95., 97., 29., 31., 38., 45., 72.],
        vec![10., 12., 94., 96., 78., 35., 37., 44., 46., 53.],
        vec![11., 18., 100., 77., 84., 36., 43., 50., 27., 59.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(a_sparse.get(2,2).unwrap(), 88.);
    assert_eq!(a_sparse.get(9,9).unwrap(), 59.);
    assert_eq!(a_sparse.get(10,10), None);
}

#[test]
fn todense_1() {
    let a = vec![vec![0., 0., 2.], vec![1., 0., 0.], vec![9., 9., 9.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(a_sparse.todense(), a);
}

#[test]
fn todense_2() {
    let a = vec![
        vec![92., 99., 1., 8., 15., 67., 74., 51., 58., 40.],
        vec![98., 80., 7., 14., 16., 73., 55., 57., 64., 41.],
        vec![4., 81., 88., 20., 22., 54., 56., 63., 70., 47.],
        vec![85., 87., 19., 21., 3., 60., 62., 69., 71., 28.],
        vec![86., 93., 25., 2., 9., 61., 68., 75., 52., 34.],
        vec![17., 24., 76., 83., 90., 42., 49., 26., 33., 65.],
        vec![23., 5., 82., 89., 91., 48., 30., 32., 39., 66.],
        vec![79., 6., 13., 95., 97., 29., 31., 38., 45., 72.],
        vec![10., 12., 94., 96., 78., 35., 37., 44., 46., 53.],
        vec![11., 18., 100., 77., 84., 36., 43., 50., 27., 59.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(a_sparse.todense(), a);
}

#[test]
fn todense_3() {
    let a = vec![vec![1., 1., 3.], vec![5., 0., 0.], vec![2., 2., 0.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(a_sparse.todense(), a);
}

#[test]
fn transpose_1() {
    let a = vec![
        vec![2.1615, 2.0044, 2.1312, 0.8217, 2.2074],
        vec![2.2828, 1.9089, 1.9295, 0.9412, 2.0017],
        vec![2.2156, 1.8776, 1.9473, 1.0190, 1.8352],
        vec![1.0244, 0.8742, 0.9177, 0.7036, 0.7551],
        vec![2.0367, 1.5642, 1.4313, 0.8668, 1.7571],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(
        rsparse::transpose(&a_sparse).todense(),
        vec![
            vec![2.1615, 2.2828, 2.2156, 1.0244, 2.0367],
            vec![2.0044, 1.9089, 1.8776, 0.8742, 1.5642],
            vec![2.1312, 1.9295, 1.9473, 0.9177, 1.4313],
            vec![0.8217, 0.9412, 1.0190, 0.7036, 0.8668],
            vec![2.2074, 2.0017, 1.8352, 0.7551, 1.7571]
        ]
    )
}

#[test]
fn transpose_2() {
    let a = vec![
        vec![92., 99., 1., 8., 15., 67., 74., 51., 58., 40.],
        vec![98., 80., 7., 14., 16., 73., 55., 57., 64., 41.],
        vec![4., 81., 88., 20., 22., 54., 56., 63., 70., 47.],
        vec![85., 87., 19., 21., 3., 60., 62., 69., 71., 28.],
        vec![86., 93., 25., 2., 9., 61., 68., 75., 52., 34.],
        vec![17., 24., 76., 83., 90., 42., 49., 26., 33., 65.],
        vec![23., 5., 82., 89., 91., 48., 30., 32., 39., 66.],
        vec![79., 6., 13., 95., 97., 29., 31., 38., 45., 72.],
        vec![10., 12., 94., 96., 78., 35., 37., 44., 46., 53.],
        vec![11., 18., 100., 77., 84., 36., 43., 50., 27., 59.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(
        rsparse::transpose(&rsparse::transpose(&a_sparse)).todense(),
        a
    );
}

#[test]
fn transpose_3() {
    let a = vec![vec![1., 0., 0.], vec![0., 1., 0.], vec![0., 0., 1.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    assert_eq!(rsparse::transpose(&a_sparse).todense(), a);
}

#[test]
fn gaxpy_1() {
    let a = vec![vec![0., 0., 2.], vec![1., 0., 0.], vec![9., 9., 9.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);
    let x = vec![1., 2., 3.];
    let y = vec![3., 2., 1.];
    assert_eq!(rsparse::gaxpy(&a_sparse, &x, &y), vec!(9., 3., 55.));
}

#[test]
fn gaxpy_2() {
    let a = vec![
        vec![92., 99., 1., 8., 15., 67., 74., 51., 58., 40.],
        vec![98., 80., 7., 14., 16., 73., 55., 57., 64., 41.],
        vec![4., 81., 88., 20., 22., 54., 56., 63., 70., 47.],
        vec![85., 87., 19., 21., 3., 60., 62., 69., 71., 28.],
        vec![86., 93., 25., 2., 9., 61., 68., 75., 52., 34.],
        vec![17., 24., 76., 83., 90., 42., 49., 26., 33., 65.],
        vec![23., 5., 82., 89., 91., 48., 30., 32., 39., 66.],
        vec![79., 6., 13., 95., 97., 29., 31., 38., 45., 72.],
        vec![10., 12., 94., 96., 78., 35., 37., 44., 46., 53.],
        vec![11., 18., 100., 77., 84., 36., 43., 50., 27., 59.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);
    let x = vec![1., 2., 3., 4., 5., 6., 7., 8., 9., 0.];
    let y = vec![0., 9., 8., 7., 6., 5., 4., 3., 2., 1.];
    assert_eq!(
        rsparse::gaxpy(&a_sparse, &x, &y),
        vec!(2250., 2279., 2478., 2407., 2316., 2180., 2199., 2098., 2327., 2236.)
    );
}

#[test]
fn multiply_1() {
    let a = vec![vec![0., 0., 2.], vec![1., 0., 0.], vec![9., 9., 9.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![vec![0., 0., 2.], vec![1., 0., 0.], vec![9., 1., 9.]];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    assert_eq!(
        c.todense(),
        vec![vec![18., 2., 18.], vec![0., 0., 2.], vec![90., 9., 99.]]
    )
}

#[test]
fn multiply_2() {
    let a = vec![vec![1., 1., 3.], vec![5., 0., 0.], vec![2., 2., 0.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![vec![1., 0., 0.], vec![0., 1., 0.], vec![0., 0., 1.]];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    // Check data
    assert_eq!(c.x, vec![1., 5., 2., 1., 2., 3.]);
    // Check indices
    assert_eq!(c.i, vec![0, 1, 2, 0, 2, 0]);
    // Check indptr
    assert_eq!(c.p, vec![0, 3, 5, 6]);
}

#[test]
fn multiply_3() {
    let a = vec![vec![1., 1., 3.], vec![5., 0., 0.], vec![2., 2., 0.]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![vec![1., 0., 0.], vec![0., 1., 0.], vec![0., 0., 1.]];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    assert_eq!(
        c.todense(),
        vec![vec![1., 1., 3.], vec![5., 0., 0.], vec![2., 2., 0.]]
    );

    let d = rsparse::multiply(&b_sparse, &a_sparse);

    assert_eq!(
        d.todense(),
        vec![vec![1., 1., 3.], vec![5., 0., 0.], vec![2., 2., 0.]]
    );
}

#[test]
fn multiply_4() {
    let a = vec![
        vec![0.951851, 0.980789, 0.538168, 0.597793, 0.729354],
        vec![0.427680, 0.511328, 0.794301, 0.969392, 0.702270],
        vec![0.294124, 0.453990, 0.932289, 0.842932, 0.803577],
        vec![0.045583, 0.318977, 0.735981, 0.090698, 0.312947],
        vec![0.285703, 0.371392, 0.758594, 0.961243, 0.282974],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![
        vec![5.6488e-01, 8.4342e-01, 7.9746e-01, 1.7830e-01, 5.1775e-01],
        vec![4.0667e-01, 1.2647e-01, 1.8642e-01, 1.1316e-01, 8.6533e-01],
        vec![9.9557e-01, 8.3827e-01, 7.3728e-01, 8.8159e-01, 4.7664e-01],
        vec![9.6210e-01, 5.4480e-01, 3.6677e-01, 1.0864e-01, 9.4581e-01],
        vec![1.5638e-01, 4.1233e-01, 7.8597e-01, 2.1770e-03, 6.0253e-02],
    ];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    utils::assert_eq_f2d_vec(
        &c.todense(),
        &vec![
            vec![2.161516, 2.0043929, 2.131185, 0.8216767, 2.2073836],
            vec![2.282785, 1.908912, 1.9295087, 0.9412086, 2.0016687],
            vec![2.215576, 1.8775643, 1.9472924, 1.019038, 1.8351716],
            vec![1.0243871, 0.8741871, 0.9176706, 0.7035911, 0.755058],
            vec![2.0367186, 1.564208, 1.4313319, 0.8667819, 1.7570789],
        ],
        1e-6,
    );
}

#[test]
fn multiply_5() {
    let a = vec![vec![-0.0448, 0.0, 0.0, -0.6513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0913, 0.0, -0.6458, 0.9539, -0.1505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9656, 0.0, 0.0, 0.319, 0.9605, 0.0, 0.0, 0.9821, 0.0, -0.1877, 0.4781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.2972, 0.0, 0.0, 0.0, 0.0, 0.1657, 0.0, 0.3525, 0.4128, 0.1942, 0.8642, 0.0, 0.0, 0.0, 0.0, 0.7068, 0.0, 0.0, 0.0, -0.1464, -0.1072, 0.0, 0.3149, 0.1612, 0.0, 0.0, 0.0, -0.6126, 0.0, 0.3079, 0.0, -0.1027, 0.0, 0.0, -0.2727, 0.0, 0.0, 0.1274, 0.0, 0.0],vec![-0.4993, 0.0, 0.0, 0.097, 0.89, 0.0, 0.0, 0.0, -0.4698, 0.0, -0.1984, 0.0, -0.9955, 0.3902, 0.5253, 0.0, -0.1273, 0.0, 0.0, 0.8663, 0.0, 0.845, 0.0, 0.9923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6716, 0.0, 0.0, 0.0, 0.0, -0.0416, 0.0],vec![0.0, 0.0, 0.0, 0.4675, 0.2732, 0.0, 0.0, 0.0, 0.0, 0.4315, 0.0, 0.0, 0.0, 0.2181, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0631, -0.2512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7084, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.9446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9323, 0.0, -0.9645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4629, 0.3836, 0.0, 0.6237, 0.4496, 0.9563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, -0.6463, 0.0, 0.7208, 0.0, 0.0, 0.5888, 0.0, 0.0, 0.0, 0.61, -0.7287, -0.5816, 0.0, 0.0, 0.0, -0.2524, -0.9093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7358, -0.5409, 0.0, 0.9689, 0.0, 0.0, 0.0, -0.74, 0.6748, 0.0, 0.0, 0.0, -0.0405, 0.0, 0.0],vec![0.0, -0.1218, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8713, 0.0, 0.0, 0.0, -0.2037, 0.0, 0.899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3512, 0.3971, -0.0534, 0.0, 0.0, 0.0, 0.5346, 0.0, 0.0, 0.0, 0.5619, 0.0, 0.2029, 0.0242, -0.8003, 0.0, 0.0, 0.077],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.254, 0.0, 0.0, 0.0, 0.0, 0.0, -0.624, -0.8488, -0.4059, -0.3248, 0.5839, -0.0361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8688, 0.0, 0.0, -0.5134, 0.0, 0.0, 0.0, 0.0, -0.1328, -0.189, 0.0, -0.4529, 0.0],vec![0.0, 0.4753, 0.0, 0.0, 0.0, 0.0, -0.5415, 0.0, 0.0, 0.7277, 0.0, 0.0, 0.0, -0.541, 0.0, 0.9883, 0.7223, -0.4015, 0.0, 0.0, 0.4649, 0.0, 0.0, -0.2426, 0.0, 0.0, 0.0, -0.2306, 0.9554, -0.7911, -0.8177, 0.8959, 0.7521, 0.0, 0.1206, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.2119, 0.0, 0.0, 0.8261, 0.2213, 0.0, 0.6523, 0.26, 0.0, -0.2852, -0.2888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1909, 0.0, -0.8734, 0.0, 0.8658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4433, 0.5804, 0.0, 0.0, 0.0, 0.1498, 0.0, 0.8623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2405, 0.0, 0.3093, 0.0, 0.6803, 0.0, 0.0, 0.0, -0.7764, -0.1687, 0.0, -0.4784, 0.0, -0.2208, 0.0, -0.8174],vec![-0.1317, -0.1779, 0.7735, 0.0, 0.9005, 0.7939, 0.0, 0.0, 0.6336, -0.5651, -0.2213, 0.0, 0.0798, -0.3093, 0.0462, 0.0, 0.0, -0.054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.498, 0.1227, 0.0, 0.0, 0.0, -0.9761, 0.311, 0.0, 0.0, -0.1641, 0.2766, 0.1586, 0.0, -0.3475, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0053, 0.0, 0.0, -0.5553, 0.0, 0.0, 0.0, -0.3154, 0.0, -0.8496, 0.3717, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8487, 0.7485, 0.2275, 0.0, 0.4434, 0.0, -0.2439, -0.8475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3558, 0.0, 0.0, -0.6203, 0.0, 0.0993],vec![0.0, 0.4124, 0.7778, -0.9653, 0.0, 0.5652, 0.0, 0.3563, 0.0, 0.0, 0.0, 0.0, 0.7901, 0.4002, 0.0, 0.0, 0.0, 0.8271, 0.4093, -0.284, -0.1045, 0.0, 0.0, 0.0, -0.8846, 0.5573, -0.2783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6784, 0.9027, -0.4842, 0.0, -0.8093, 0.0],vec![0.0, 0.0, -0.5606, -0.4587, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0649, -0.9381, 0.0, 0.0, 0.0, 0.0, -0.723, 0.0, 0.8198, 0.0, 0.0, 0.4356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1833, 0.015, 0.0, 0.0, -0.2001, 0.0, 0.0, 0.0, -0.959, -0.8713, 0.0, 0.236, 0.0],vec![0.0, -0.7555, 0.0, 0.0155, 0.0, -0.7016, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9061, 0.2571, 0.2508, 0.6272, 0.0, 0.9509, 0.4726, 0.7393, 0.0, 0.9018, 0.5896, 0.0, 0.0, 0.1411, 0.0, 0.0, 0.5185, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3857, 0.0, 0.0, -0.6833, -0.7136, 0.0, -0.1793],vec![-0.2185, 0.0, 0.0, 0.0, -0.8847, 0.0, 0.4959, 0.7918, 0.6492, 0.0, 0.0, -0.0667, -0.4562, 0.52, 0.0, 0.0, 0.684, -0.0836, 0.0, 0.0, -0.0208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6686, -0.9399, 0.7278, -0.5117, 0.0, 0.5735],vec![0.4854, -0.8332, 0.6644, 0.7906, -0.9148, 0.0, 0.0, 0.6307, -0.7942, 0.0, 0.0, 0.0, 0.0, 0.5267, 0.5491, 0.0, 0.0, -0.7989, 0.0, 0.2534, 0.4375, 0.0, 0.0, -0.0151, -0.1984, 0.0, 0.0, 0.0, 0.0, -0.143, 0.0, 0.0, 0.0, 0.1208, -0.4907, 0.0, 0.4337, 0.0, -0.4625, 0.0],vec![0.0, 0.0, 0.0, -0.9633, 0.0, 0.2426, 0.0, 0.0, -0.2343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7574, 0.8868, 0.0, 0.5104, -0.5091, 0.1073, 0.0, -0.282, 0.0, 0.1842, 0.0, 0.0, 0.3791, 0.0, 0.0, 0.0, 0.167, -0.6205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0553, -0.7172, 0.0, 0.0, 0.5728, 0.9537, 0.0, -0.593, 0.0, 0.0, 0.0, 0.0, -0.204, 0.0, -0.7041, 0.0, 0.0, -0.7661, 0.0, 0.0, 0.0539, 0.0, -0.737, -0.5746, 0.0, -0.8161, -0.2017, 0.0, 0.0, 0.0, 0.0, 0.3179, 0.0, 0.0, 0.0, -0.6508, 0.0, 0.0, -0.1622],vec![-0.1943, 0.0, 0.0, -0.9166, -0.2661, 0.0, 0.6806, -0.7651, 0.0, 0.0, 0.0, 0.171, 0.0, 0.0, -0.2364, 0.0, 0.6399, 0.0, 0.0, -0.4984, 0.0, 0.4211, -0.9437, 0.0, 0.0, 0.0, 0.4725, -0.781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3075, 0.0, 0.0, 0.0, 0.0, 0.6655, 0.0],vec![0.2138, 0.523, -0.8799, 0.0, 0.0, -0.3713, 0.8959, 0.2662, 0.0, 0.0, 0.0, 0.6974, 0.0, -0.6168, 0.0, 0.0, 0.6315, 0.0, -0.1409, 0.0, 0.0, -0.5767, 0.0, -0.3545, 0.0, 0.0, 0.0, 0.703, 0.0, -0.7932, 0.316, 0.0, 0.0, 0.0, -0.5089, -0.1809, 0.0, -0.648, 0.4417, 0.0],vec![0.0, -0.8154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8223, 0.2998, 0.0, 0.0, 0.0, 0.0, 0.0422, 0.6168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2358, 0.6874, 0.2763, 0.0, -0.4332, -0.4737, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9568, 0.4951],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2477, -0.6123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7104, -0.665, 0.491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8181, 0.7629, 0.0, 0.9589, 0.9958, 0.1761, 0.5846, 0.4095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8007],vec![0.7197, 0.0012, 0.0, 0.5416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.36, -0.6825, 0.0, 0.0, 0.0, 0.0, -0.4816, -0.6216, 0.0, 0.0, 0.0, -0.63, 0.6402, 0.0, -0.5744, 0.0, 0.0, -0.4113, 0.8592, 0.0, 0.0, 0.0, -0.8754, 0.0, 0.0, -0.385, -0.356, 0.0, 0.724],vec![-0.9363, 0.0, 0.0, 0.0, 0.0, -0.3678, 0.0, 0.0, -0.7111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2493, -0.0915, 0.0, -0.0238, 0.0, 0.3636, -0.2332, 0.0, 0.0, -0.7722, 0.0, -0.6553, -0.5143, 0.0, 0.0, 0.4358],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.208, 0.0, 0.4724, 0.0, 0.0, 0.0, -0.0018, 0.0, -0.014, 0.0, 0.0, 0.0, 0.0, -0.8845, 0.0, 0.0, 0.7006, 0.0, -0.5331, 0.6865, 0.0, 0.0, 0.0, -0.4733, -0.0011, 0.9737, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9984, 0.0, 0.475],vec![0.0, 0.0, 0.9491, 0.0, 0.0, 0.0, -0.4415, 0.9667, 0.0, -0.7083, 0.0, 0.2356, 0.0, -0.3054, 0.0, 0.0, 0.0, -0.515, 0.0, -0.8075, 0.9926, 0.0, -0.872, 0.0, 0.0, -0.6772, 0.935, 0.0, 0.0, 0.8958, 0.0, 0.0, 0.7448, 0.0, 0.0, 0.3871, 0.0, 0.0, 0.1385, 0.0],vec![0.0, 0.0, 0.0, 0.0, -0.2393, -0.5201, 0.4853, 0.0, 0.0, -0.5841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7191, 0.0, -0.934, 0.0, 0.0, -0.8376, 0.1691, 0.0, 0.0, 0.0, -0.572, 0.0, 0.0, 0.0, 0.661, 0.0202, 0.0, 0.0, 0.0, 0.3586, 0.0, 0.2529, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7324, 0.0, 0.0, 0.0, 0.6772, 0.6162, 0.0, 0.0, 0.0, 0.0, 0.184, 0.0, 0.1401, 0.0, 0.3516, 0.988, 0.4778, 0.0, 0.2435, 0.0, 0.986, 0.0, 0.0, 0.0, -0.6738, -0.7669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2486, 0.0],vec![0.0, 0.8958, 0.0, 0.0, 0.0, -0.9902, 0.0, 0.0, 0.0, -0.905, 0.0, 0.0, -0.5441, 0.0495, 0.0, 0.1834, 0.0, 0.0, 0.8067, -0.9462, 0.0, 0.0, 0.0, 0.2103, 0.0, 0.0, 0.0, 0.0, 0.5021, -0.2983, 0.0, 0.0, -0.7351, 0.8889, 0.0, -0.2551, 0.3059, 0.1802, 0.9253, -0.1269],vec![0.0, 0.0, 0.0, -0.8132, 0.0, -0.7751, 0.0, -0.8652, 0.0, -0.9719, 0.0, -0.4894, 0.0, 0.0, -0.3542, 0.0, 0.0, 0.0, 0.8774, 0.4154, 0.3358, 0.0, -0.3827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2239, 0.0, 0.0, 0.0, -0.0928, 0.0, 0.0],vec![0.0551, 0.0, 0.0, 0.0, 0.8894, 0.0, 0.5206, 0.7763, 0.0, -0.2573, -0.5671, 0.7392, 0.12, 0.7481, -0.2175, 0.6201, 0.0, 0.0, 0.3118, 0.0, -0.2975, 0.0, 0.0, -0.3537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5245, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6408, 0.0, 0.0],vec![-0.9082, 0.0, -0.264, 0.6504, -0.5802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6269, 0.0, 0.4518, 0.0, -0.7345, -0.731, 0.0, -0.5015, 0.0, 0.0, 0.0, -0.8252, -0.2824, 0.0, -0.0287, -0.936, -0.1958, 0.0, -0.586, 0.0, 0.7946, 0.0, 0.2091, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.1603, 0.0, -0.5969, 0.0, 0.0, 0.3598, 0.0, -0.0366, 0.0, 0.6119, 0.0, 0.7806, 0.0, 0.0, 0.0, 0.0, 0.0366, 0.0, 0.0, -0.8814, -0.4215, 0.0, 0.6698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3691, 0.0, 0.0, 0.0, 0.0, 0.0, -0.105, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.0, -0.6273, 0.0, 0.0, 0.5252, 0.0, -0.2378, -0.2799, -0.491, 0.7036, 0.0, 0.0, 0.2771, 0.0, 0.2244, 0.0, 0.0, -0.3637, -0.8194, 0.4463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9937, 0.0, 0.0, -0.9384, 0.3932, -0.3088, 0.7892, 0.0, 0.0],vec![-0.542, 0.0, 0.0, 0.0, 0.4241, 0.0, -0.9599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3309, -0.6937, -0.8952, 0.0, 0.0, 0.0, -0.822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.467, 0.0, 0.0, 0.8745, 0.0772, -0.0607, -0.5294, -0.7859, 0.9393, 0.0055, 0.0, 0.066],vec![0.0, -0.7767, 0.0, 0.6949, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8287, 0.8618, 0.0, 0.2259, 0.0, 0.9207, 0.0, 0.0, 0.0, 0.9818, 0.0, 0.6003, 0.0, -0.84, 0.0, 0.0, 0.0, 0.9531, 0.0, -0.2526, 0.4943, 0.0, -0.9837, 0.0028, 0.1302, 0.0, 0.0, 0.8365, 0.0, -0.7984, 0.0],vec![0.4347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6476, 0.0, -0.2575, 0.0, 0.0, -0.2401, 0.9445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5766, -0.9809, 0.0, 0.3161, 0.0, -0.2509, -0.3343, 0.8588, -0.6495, 0.0, 0.8216, 0.4636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7254, 0.1629, 0.2638],vec![0.0, -0.6674, -0.9636, -0.1864, 0.7388, 0.0, 0.0, 0.0, 0.8067, -0.266, 0.0, -0.8512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5295, 0.0, 0.0, 0.5989, 0.0, 0.0, 0.0, 0.2274, -0.8271, 0.0, 0.0, 0.0, -0.6461, 0.0, 0.0, 0.2443, 0.0, -0.1584, 0.0, 0.0, 0.0, 0.0, 0.0]];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![vec![-0.0448, 0.2972, -0.4993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1317, 0.0, 0.0, 0.0, 0.0, -0.2185, 0.4854, 0.0, 0.0, -0.1943, 0.2138, 0.0, 0.0, 0.7197, -0.9363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0551, -0.9082, 0.0, 0.0, -0.542, 0.0, 0.4347, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, -0.6463, -0.1218, 0.0, 0.4753, 0.2119, 0.0, -0.1779, 0.0, 0.4124, 0.0, -0.7555, 0.0, -0.8332, 0.0, 0.0553, 0.0, 0.523, -0.8154, 0.0, 0.0012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7767, 0.0, -0.6674],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7735, 0.0, 0.7778, -0.5606, 0.0, 0.0, 0.6644, 0.0, -0.7172, 0.0, -0.8799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9491, 0.0, 0.0, 0.0, 0.0, 0.0, -0.264, 0.1603, 0.0, 0.0, 0.0, 0.0, -0.9636],vec![-0.6513, 0.0, 0.097, 0.4675, 0.0, 0.7208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9653, -0.4587, 0.0155, 0.0, 0.7906, -0.9633, 0.0, -0.9166, 0.0, 0.0, 0.0, 0.5416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8132, 0.0, 0.6504, 0.0, -0.6273, 0.0, 0.6949, 0.0, -0.1864],vec![0.0, 0.0, 0.89, 0.2732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8261, 0.0, 0.9005, 0.0053, 0.0, 0.0, 0.0, -0.8847, -0.9148, 0.0, 0.0, -0.2661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2393, 0.0, 0.0, 0.0, 0.8894, -0.5802, -0.5969, 0.0, 0.4241, 0.0, 0.0, 0.7388],vec![0.0, 0.1657, 0.0, 0.0, 0.9446, 0.0, 0.0, 0.254, 0.0, 0.2213, 0.0, 0.7939, 0.0, 0.5652, 0.0, -0.7016, 0.0, 0.0, 0.2426, 0.5728, 0.0, -0.3713, 0.0, 0.0, 0.0, -0.3678, 0.0, 0.0, -0.5201, 0.0, -0.9902, -0.7751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.5888, 0.0, 0.0, -0.5415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4959, 0.0, 0.0, 0.9537, 0.6806, 0.8959, 0.0, -0.2477, 0.0, 0.0, -0.208, -0.4415, 0.4853, 0.0, 0.0, 0.0, 0.5206, 0.0, 0.0, 0.5252, -0.9599, 0.0, 0.6476, 0.0],vec![0.0, 0.3525, 0.0, 0.0, 0.0, 0.0, 0.8713, 0.0, 0.0, 0.6523, 0.0, 0.0, -0.5553, 0.3563, 0.0, 0.0, 0.7918, 0.6307, 0.0, 0.0, -0.7651, 0.2662, 0.0, -0.6123, 0.0, 0.0, 0.0, 0.9667, 0.0, 0.7324, 0.0, -0.8652, 0.7763, 0.0, 0.3598, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.4128, -0.4698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.26, 0.0, 0.6336, 0.0, 0.0, 0.0, 0.0, 0.6492, -0.7942, -0.2343, -0.593, 0.0, 0.0, -0.8223, 0.0, 0.0, -0.7111, 0.4724, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2378, 0.0, 0.0, -0.2575, 0.8067],vec![0.0913, 0.1942, 0.0, 0.4315, 0.0, 0.0, 0.0, 0.0, 0.7277, 0.0, 0.0, -0.5651, 0.0, 0.0, -0.0649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2998, 0.0, 0.0, 0.0, 0.0, -0.7083, -0.5841, 0.0, -0.905, -0.9719, -0.2573, 0.0, -0.0366, -0.2799, 0.0, -0.8287, 0.0, -0.266],vec![0.0, 0.8642, -0.1984, 0.0, 0.0, 0.61, 0.0, 0.0, 0.0, -0.2852, 0.0, -0.2213, 0.0, 0.0, -0.9381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5671, 0.0, 0.0, -0.491, 0.0, 0.8618, 0.0, 0.0],vec![-0.6458, 0.0, 0.0, 0.0, 0.0, -0.7287, -0.2037, -0.624, 0.0, -0.2888, 0.4433, 0.0, -0.3154, 0.0, 0.0, -0.9061, -0.0667, 0.0, 0.0, 0.0, 0.171, 0.6974, 0.0, 0.0, -0.36, 0.0, 0.0, 0.2356, 0.0, 0.6772, 0.0, -0.4894, 0.7392, 0.0, 0.6119, 0.7036, 0.0, 0.0, -0.2401, -0.8512],vec![0.9539, 0.0, -0.9955, 0.0, 0.9323, -0.5816, 0.0, -0.8488, 0.0, 0.0, 0.5804, 0.0798, 0.0, 0.7901, 0.0, 0.2571, -0.4562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6825, 0.0, -0.0018, 0.0, 0.0, 0.6162, -0.5441, 0.0, 0.12, 0.0, 0.0, 0.0, 0.0, 0.2259, 0.9445, 0.0],vec![-0.1505, 0.0, 0.3902, 0.2181, 0.0, 0.0, 0.899, -0.4059, -0.541, 0.0, 0.0, -0.3093, -0.8496, 0.4002, 0.0, 0.2508, 0.52, 0.5267, 0.0, -0.204, 0.0, -0.6168, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3054, 0.0, 0.0, 0.0495, 0.0, 0.7481, 0.6269, 0.7806, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.5253, 0.0, -0.9645, 0.0, 0.0, -0.3248, 0.0, 0.0, 0.0, 0.0462, 0.3717, 0.0, 0.0, 0.6272, 0.0, 0.5491, 0.0, 0.0, -0.2364, 0.0, 0.0422, 0.0, 0.0, 0.0, -0.014, 0.0, 0.0, 0.0, 0.0, -0.3542, -0.2175, 0.0, 0.0, 0.2771, 0.0, 0.9207, 0.0, 0.0],vec![0.0, 0.7068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5839, 0.9883, 0.0, 0.0, 0.0, 0.0, 0.0, -0.723, 0.0, 0.0, 0.0, -0.7574, -0.7041, 0.0, 0.0, 0.6168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1834, 0.0, 0.6201, 0.4518, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.0, 0.0, -0.1273, 0.0, 0.0, -0.2524, 0.0, -0.0361, 0.7223, 0.0, 0.1498, 0.0, 0.0, 0.0, 0.0, 0.9509, 0.684, 0.0, 0.8868, 0.0, 0.6399, 0.6315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2244, -0.3309, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, -0.9093, 0.0, 0.0, -0.4015, 0.0, 0.0, -0.054, 0.0, 0.8271, 0.8198, 0.4726, -0.0836, -0.7989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7104, -0.4816, 0.5675, 0.0, -0.515, -0.7191, 0.184, 0.0, 0.0, 0.0, -0.7345, 0.0, 0.0, -0.6937, 0.0, 0.0, 0.5295],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8623, 0.0, 0.0, 0.4093, 0.0, 0.7393, 0.0, 0.0, 0.5104, -0.7661, 0.0, -0.1409, 0.0, -0.665, -0.6216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8067, 0.8774, 0.3118, -0.731, 0.0366, 0.0, -0.8952, 0.9818, 0.5766, 0.0],vec![0.0, -0.1464, 0.8663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1909, 0.0, 0.0, 0.0, -0.284, 0.0, 0.0, 0.0, 0.2534, -0.5091, 0.0, -0.4984, 0.0, 0.0, 0.491, 0.0, 0.0, -0.8845, -0.8075, -0.934, 0.1401, -0.9462, 0.4154, 0.0, 0.0, 0.0, -0.3637, 0.0, 0.0, -0.9809, 0.0],vec![0.0, -0.1072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4649, 0.0, 0.0, 0.0, -0.8487, -0.1045, 0.4356, 0.9018, -0.0208, 0.4375, 0.1073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9926, 0.0, 0.0, 0.0, 0.3358, -0.2975, -0.5015, 0.0, -0.8194, 0.0, 0.6003, 0.0, 0.5989],vec![0.9656, 0.0, 0.845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8734, 0.0, 0.0, 0.7485, 0.0, 0.0, 0.5896, 0.0, 0.0, 0.0, 0.0539, 0.4211, -0.5767, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3516, 0.0, 0.0, 0.0, 0.0, -0.8814, 0.4463, 0.0, 0.0, 0.3161, 0.0],vec![0.0, 0.3149, 0.0, 0.0, 0.0, 0.0, 0.3512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2275, 0.0, 0.0, 0.0, 0.0, 0.0, -0.282, 0.0, -0.9437, 0.0, 0.0, 0.0, -0.63, 0.0, 0.7006, -0.872, -0.8376, 0.988, 0.0, -0.3827, 0.0, 0.0, -0.4215, 0.0, -0.822, -0.84, 0.0, 0.0],vec![0.0, 0.1612, 0.9923, -0.4056, 0.4629, 0.0, 0.3971, 0.0, -0.2426, 0.8658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0151, 0.0, -0.737, 0.0, -0.3545, 0.0, 0.0, 0.6402, 0.0, 0.0, 0.0, 0.1691, 0.4778, 0.2103, 0.0, -0.3537, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2509, 0.0],vec![0.319, 0.0, 0.0, 0.0, 0.3836, 0.0, -0.0534, 0.0, 0.0, 0.0, 0.2405, -0.498, 0.4434, -0.8846, 0.0, 0.1411, 0.0, -0.1984, 0.1842, -0.5746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2493, -0.5331, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8252, 0.6698, 0.0, 0.0, 0.0, -0.3343, 0.2274],vec![0.9605, 0.0, 0.0, 0.0, 0.0, -0.7358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1227, 0.0, 0.5573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2358, 0.0, -0.5744, -0.0915, 0.6865, -0.6772, 0.0, 0.2435, 0.0, 0.0, 0.0, -0.2824, 0.0, 0.0, 0.0, 0.0, 0.8588, -0.8271],vec![0.0, 0.0, 0.0, 0.0, 0.6237, -0.5409, 0.0, 0.0, 0.0, 0.0, 0.3093, 0.0, -0.2439, -0.2783, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8161, 0.4725, 0.0, 0.6874, 0.8181, 0.0, 0.0, 0.0, 0.935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9531, -0.6495, 0.0],vec![0.0, -0.6126, 0.0, 0.0, 0.4496, 0.0, 0.0, 0.8688, -0.2306, 0.0, 0.0, 0.0, -0.8475, 0.0, 0.1833, 0.5185, 0.0, 0.0, 0.3791, -0.2017, -0.781, 0.703, 0.2763, 0.7629, 0.0, -0.0238, 0.0, 0.0, -0.572, 0.986, 0.0, 0.0, 0.0, -0.0287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.9821, 0.0, 0.0, 0.0, 0.9563, 0.9689, 0.5346, 0.0, 0.9554, 0.0, 0.6803, 0.0, 0.0, 0.0, 0.015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5021, 0.0, 0.0, -0.936, 0.0, 0.0, 0.467, -0.2526, 0.8216, 0.0],vec![0.0, 0.3079, 0.0, 0.0631, 0.0, 0.0, 0.0, 0.0, -0.7911, 0.0, 0.0, -0.9761, 0.0, 0.0, 0.0, 0.0, 0.0, -0.143, 0.0, 0.0, 0.0, -0.7932, -0.4332, 0.9589, 0.8592, 0.3636, -0.4733, 0.8958, 0.0, 0.0, -0.2983, 0.0, 0.0, -0.1958, 0.0, 0.0, 0.0, 0.4943, 0.4636, -0.6461],vec![-0.1877, 0.0, 0.0, -0.2512, 0.0, 0.0, 0.0, -0.5134, -0.8177, 0.0, 0.0, 0.311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.316, -0.4737, 0.9958, 0.0, -0.2332, -0.0011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5245, 0.0, 0.3691, 0.0, 0.0, 0.0, 0.0, 0.0],vec![0.4781, -0.1027, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8959, -0.5816, 0.0, 0.0, 0.0, 0.0, -0.2001, 0.0, 0.0, 0.0, 0.167, 0.0, 0.0, 0.0, 0.0, 0.1761, 0.0, 0.0, 0.9737, 0.0, 0.661, -0.6738, 0.0, 0.0, 0.0, -0.586, 0.0, -0.9937, 0.8745, -0.9837, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, -0.74, 0.5619, 0.0, 0.7521, 0.0, -0.7764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6205, 0.3179, 0.0, 0.0, 0.0, 0.5846, 0.0, 0.0, 0.0, 0.7448, 0.0202, -0.7669, -0.7351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0772, 0.0028, 0.0, 0.2443],vec![0.0, 0.0, 0.6716, 0.0, 0.0, 0.6748, 0.0, 0.0, 0.0, 0.0, -0.1687, -0.1641, 0.0, 0.0, 0.0, -0.3857, 0.0, 0.1208, 0.0, 0.0, 0.3075, 0.0, 0.0, 0.4095, -0.8754, -0.7722, 0.0, 0.0, 0.0, 0.0, 0.8889, -0.2239, 0.0, 0.7946, 0.0, 0.0, -0.0607, 0.1302, 0.0, 0.0],vec![0.0, -0.2727, 0.0, 0.0, 0.0, 0.0, 0.2029, 0.0, 0.1206, 0.0, 0.0, 0.2766, -0.3558, 0.6784, 0.0, 0.0, 0.6686, -0.4907, 0.0, 0.0, 0.0, -0.5089, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.9384, -0.5294, 0.0, 0.0, -0.1584],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0242, -0.1328, 0.0, 0.0, -0.4784, 0.1586, 0.0, 0.9027, -0.959, 0.0, -0.9399, 0.0, 0.0, 0.0, 0.0, -0.1809, 0.0, 0.0, 0.0, -0.6553, 0.0, 0.3871, 0.0, 0.0, -0.2551, 0.0, 0.0, 0.2091, 0.0, 0.3932, -0.7859, 0.0, 0.0, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8003, -0.189, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4842, -0.8713, -0.6833, 0.7278, 0.4337, 0.0, -0.6508, 0.0, 0.0, 0.0, 0.0, -0.385, -0.5143, 0.0, 0.0, 0.3586, 0.0, 0.3059, 0.0, 0.0, 0.0, -0.105, -0.3088, 0.9393, 0.8365, 0.0, 0.0],vec![0.0, 0.1274, 0.0, -0.7084, 0.0, -0.0405, 0.0, 0.0, 0.0, 0.0, -0.2208, -0.3475, -0.6203, 0.0, 0.0, -0.7136, -0.5117, 0.0, 0.0, 0.0, 0.0, -0.648, 0.0, 0.0, -0.356, 0.0, -0.9984, 0.0, 0.0, 0.0, 0.1802, -0.0928, -0.6408, 0.0, 0.0, 0.7892, 0.0055, 0.0, -0.7254, 0.0],vec![0.0, 0.0, -0.0416, 0.0, 0.0, 0.0, 0.0, -0.4529, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8093, 0.236, 0.0, 0.0, -0.4625, 0.0, 0.0, 0.6655, 0.4417, -0.9568, 0.0, 0.0, 0.0, 0.0, 0.1385, 0.2529, 0.2486, 0.9253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7984, 0.1629, 0.0],vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.077, 0.0, 0.0, 0.0, -0.8174, 0.0, 0.0993, 0.0, 0.0, -0.1793, 0.5735, 0.0, 0.0, -0.1622, 0.0, 0.0, 0.4951, 0.8007, 0.724, 0.4358, 0.475, 0.0, 0.0, 0.0, -0.1269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.066, 0.0, 0.2638, 0.0]];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    utils::assert_eq_f2d_vec(
        &c.todense(),
        &vec![vec![4.9692, -0.044676, -0.23324, -0.25073, 1.9508, -0.30876, 0.50423, -0.24932, 1.6679, -0.93486, 1.0123, -0.022372, 1.1958, 1.5752, 0.21188, 1.3969, -0.46055, -0.67916, 0.766, -0.10054, 0.90181, -0.98333, 0.34275, -0.10271, -1.7592, 0.077368, 0.95339, -0.82134, 0.26264, 0.40181, -0.11607, 0.75692, -0.59992, -2.2112, -1.2227, -0.11548, 0.9009, -1.031, 2.867, -0.075066],vec![-0.044676, 2.4239, -0.48078, -0.052442, -0.044221, 0.52203, 0.42637, -0.077445, 0.5237, 0.29877, -0.028137, -0.36715, 0.50405, 0.087109, -1.4728, -0.62154, 0.23691, 0.042011, -0.86696, -0.64281, -0.073132, -0.57996, -0.14792, -0.47794, 0.33785, -0.5063, 0.17221, 0.21627, -0.016789, 0.090912, -0.10665, -0.8513, 0.081462, 0.12068, -0.013011, 0.022738, -0.36462, 0.50823, 0.17637, 0.06144],vec![-0.23324, -0.48078, 5.6487, -0.028898, -0.97545, 1.0131, 0.74483, 0.53951, -0.54377, 0.95621, -0.71024, 0.32733, 0.50103, -0.93642, 0.13186, 0.29108, -0.41342, 0.19212, -0.53725, -0.48682, -0.33144, -1.2853, 0.44832, 0.70036, 0.41997, 0.28302, -0.99377, -0.82446, -0.86476, 0.2688, 0.50849, -0.055492, 0.58382, 0.7785, -0.97151, 0.32748, 0.64943, 0.27579, -1.8748, 0.26054],vec![-0.25073, -0.052442, -0.028898, 1.2605, -0.18778, 0.36567, 0.035037, 0.04044, 0.44991, -0.12549, 0.15643, 0.041126, 0.2556, -0.36399, -0.24246, 0.56746, 0.23425, 0.23166, -0.45036, 0.25447, -0.50119, 0.33886, 0.22104, -0.18968, 0.29999, 0.081537, 0.67772, -0.31571, -0.38599, -0.19379, -0.61151, -0.73381, 0.76078, 0.26996, -0.10131, -0.97314, 0.11195, -0.0015116, 0.64491, -0.040869],vec![1.9508, -0.044221, -0.97545, -0.18778, 4.5588, 0.047, 0.67456, 0.15239, 0.69762, 0.60989, 1.4769, 0.58874, -0.72157, 0.7576, 0.096732, -0.74082, -0.4253, -0.61272, 0.4702, -0.62022, 0.17163, -0.1988, 0.51224, 0.85316, -0.7333, -0.26249, -0.19259, 0.58316, -0.67017, 1.2389, -0.8652, -0.3906, 0.15789, -1.2246, 0.25693, -0.26732, 0.44652, -0.32449, 1.0167, 0.087245],vec![-0.30876, 0.52203, 1.0131, 0.36567, 0.047, 6.1932, 0.32935, 0.95747, -0.074139, -0.10051, 0.26315, -0.20419, 0.38689, -2.4334, -1.6338, 0.10924, 0.53001, 1.9162, -0.45895, 0.73204, -0.59408, -0.45182, -0.018295, -1.3906, 0.93463, -0.96968, -0.58609, -0.522, 0.92468, -0.63083, 1.3604, -0.37683, -0.62193, 0.97355, -0.44591, -1.0437, 0.50315, 0.72265, 0.55195, 0.86353],vec![0.50423, 0.42637, 0.74483, 0.035037, 0.67456, 0.32935, 3.1973, -0.089769, 0.31728, 0.9452, -0.25026, -0.16986, -1.1917, 1.2143, 0.68212, 1.0276, 0.74565, 0.68247, -0.45755, 0.23487, -1.0329, -0.77675, 0.13739, -0.14335, 0.25007, 0.41594, 0.3111, 0.64139, -0.50264, 0.60598, -0.38646, -0.78855, 1.0579, 0.11235, 0.79078, -0.077112, -0.86875, -1.0034, 0.42665, 0.34769],vec![-0.24932, -0.077445, 0.53951, 0.04044, 0.15239, 0.95747, -0.089769, 3.0638, 0.99011, 0.23642, -0.71118, 0.063651, -0.31545, -0.35141, -0.077821, 0.40878, 0.18044, -0.26462, -0.083311, -0.23514, -1.033, -0.029379, 1.263, 0.15157, 0.87673, 0.18987, 0.0066433, -0.13715, -0.81134, -0.20154, -0.14561, 0.22358, -0.70329, -0.043377, -0.8683, -0.53101, -0.061152, -0.28731, -0.72568, 0.53113],vec![1.6679, 0.5237, -0.54377, 0.44991, 0.69762, -0.074139, 0.31728, 0.99011, 6.9193, -0.63032, 0.17411, 0.2445, 0.21755, -0.31934, -1.0956, 0.30203, 0.048761, -0.099197, -0.46265, -0.61128, 0.27373, 0.78493, 1.1066, -1.3024, -1.0341, -0.31926, 1.3603, 0.40858, 0.29905, -1.5976, 0.033389, -0.55118, -0.74236, -1.0886, -0.75075, -1.7103, 1.7831, -2.2047, 0.12836, 0.23091],vec![-0.93486, 0.29877, 0.95621, -0.12549, 0.60989, -0.10051, 0.9452, 0.23642, -0.63032, 3.3213, -0.12803, 1.1097, -0.92049, 0.39071, 0.38395, -0.56869, -0.026328, -0.69208, -0.20154, -0.70089, -1.2313, 0.19769, -0.3866, -0.40809, 0.65848, -0.26627, -0.61233, 0.40843, -0.72904, 0.80732, -0.027864, -0.51528, 0.88314, -0.13851, 0.33474, -0.0063588, -0.1582, 0.16171, -0.67822, 0.92448],vec![1.0123, -0.028137, -0.71024, 0.15643, 1.4769, 0.26315, -0.25026, -0.71118, 0.17411, -0.12803, 3.4927, -0.044903, -0.052764, 0.080849, 0.46897, 0.93056, -0.098084, -0.0681, 1.099, -1.1655, 0.26591, 0.51189, -0.19206, -1.4979, -1.7371, 0.1475, -0.29703, -0.36985, -0.015669, 1.2533, 1.3281, 0.59784, 0.80767, -1.6996, 0.46395, -0.016865, -0.23272, 1.0766, 1.1611, -0.51233],vec![-0.022372, -0.36715, 0.32733, 0.041126, 0.58874, -0.20419, -0.16986, 0.063651, 0.2445, 1.1097, -0.044903, 4.5274, 0.18107, 1.7113, -0.38579, -0.23521, -0.33557, -0.74044, -0.047606, -0.1364, -0.27542, 0.022568, -0.23901, -0.73185, -0.76529, -1.19, 1.4568, 0.36054, -0.25939, 0.069139, -0.45053, -0.013469, 1.2184, -0.291, -0.85299, -0.34257, 0.22772, -0.027525, -0.073571, 1.0437],vec![1.1958, 0.50405, 0.50103, 0.2556, -0.72157, 0.38689, -1.1917, -0.31545, 0.21755, -0.92049, -0.052764, 0.18107, 4.0958, -1.0148, -0.525, 0.029758, -0.71101, -0.88316, -0.39478, 0.31271, 0.9288, -0.28821, -0.33695, -0.42656, 0.26297, 0.17397, 0.58429, -1.6205, 0.29296, -0.96795, -0.16645, 0.18864, -0.72598, -0.45162, -1.5178, 0.75485, 0.0067585, -0.59075, 0.79872, -0.07872],vec![1.5752, 0.087109, -0.93642, -0.36399, 0.7576, -2.4334, 1.2143, -0.35141, -0.31934, 0.39071, 0.080849, 1.7113, -1.0148, 7.2159, 0.0045002, 0.38567, -0.68442, -0.92608, 1.2464, 0.44401, 0.083628, -1.7542, 0.37826, -0.26989, -1.8481, -0.35258, 1.104, 0.25979, -1.0017, 0.79481, -1.1287, 0.24465, 0.82952, -0.67521, 0.038605, 0.66232, -2.4636, -0.4976, 2.0842, -1.2389],vec![0.21188, -1.4728, 0.13186, -0.24246, 0.096732, -1.6338, 0.68212, -0.077821, -1.0956, 0.38395, 0.46897, -0.38579, -0.525, 0.0045002, 4.6021, 1.4635, 0.18966, -1.6864, 1.0723, 1.4413, 0.43437, 0.89984, -0.64058, 0.68694, -0.31399, 1.5374, -0.19488, -0.81448, -1.0415, 0.52509, 0.13012, 0.58239, -0.02921, -1.4001, 0.0040083, 0.50052, -0.80143, -1.5362, 0.050763, 1.3379],vec![1.3969, -0.62154, 0.29108, 0.56746, -0.74082, 0.10924, 1.0276, 0.40878, 0.30203, -0.56869, 0.93056, -0.23521, 0.029758, 0.38567, 1.4635, 6.6872, 0.43081, 0.76435, 1.3547, -0.7413, 0.015818, 0.061953, 0.69695, -0.061894, 0.19592, 1.1201, 0.54276, 0.36178, -0.51648, 0.35038, -0.17068, 1.8566, -0.16824, -1.6102, -0.68502, -1.0879, -1.9384, 1.8785, 1.4962, 2.095],vec![-0.46055, 0.23691, -0.41342, 0.23425, -0.4253, 0.53001, 0.74565, 0.18044, 0.048761, -0.026328, -0.098084, -0.33557, -0.71101, -0.68442, 0.18966, 0.43081, 5.5341, 1.0062, 0.45224, -0.58481, 0.43593, 0.83438, -0.24997, -0.20787, 0.53557, 0.18704, 0.98762, 0.030656, 0.77336, 0.23825, 0.57133, -0.61194, 0.69301, 0.91308, 1.1016, -1.3959, 0.20211, 0.49325, 0.16658, -0.23575],vec![-0.67916, 0.042011, 0.19212, 0.23166, -0.61272, 1.9162, 0.68247, -0.26462, -0.099197, -0.69208, -0.0681, -0.74044, -0.88316, -0.92608, -1.6864, 0.76435, 1.0062, 6.0518, -0.6941, -0.31609, -1.5847, -0.90923, 1.8601, -0.9169, 0.75604, -0.76076, -0.43362, 1.5285, 0.59266, 0.22825, -1.1084, -1.1579, -0.14741, 1.4139, 1.1122, -0.27894, 0.56295, 2.6417, 0.095464, -1.5841],vec![0.766, -0.86696, -0.53725, -0.45036, 0.4702, -0.45895, -0.45755, -0.083311, -0.46265, -0.20154, 1.099, -0.047606, -0.39478, 1.2464, 1.0723, 1.3547, 0.45224, -0.6941, 3.603, 0.040613, 1.6742, 0.66451, -0.16977, -0.63353, -0.66139, 0.11428, 0.20654, 0.30123, 0.46653, 0.38718, 0.97045, 0.97566, -0.34247, -1.6564, 0.26091, 0.79021, -0.4204, -0.033092, 0.79243, -0.054881],vec![-0.10054, -0.64281, -0.48682, 0.25447, -0.62022, 0.73204, 0.23487, -0.23514, -0.61128, -0.70089, -1.1655, -0.1364, 0.31271, 0.44401, 1.4413, -0.7413, -0.58481, -0.31609, 0.040613, 5.3651, 0.44369, 1.6238, -0.68876, -0.49229, 0.13755, 0.33656, -0.24923, -1.5658, -0.07135, -0.77588, -1.8422, -1.1162, -0.070934, 0.78333, -0.66627, 0.86689, -0.82698, -2.1166, 1.2099, 0.12286],vec![0.90181, -0.073132, -0.33144, -0.50119, 0.17163, -0.59408, -1.0329, -1.033, 0.27373, -1.2313, 0.26591, -0.27542, 0.9288, 0.083628, 0.43437, 0.015818, 0.43593, -1.5847, 1.6742, 0.44369, 5.1788, 0.38999, -0.53771, -0.028184, -0.37248, -0.036921, -0.35855, 0.7595, 2.2649, -1.9033, 1.3606, 1.4926, -0.30918, 0.0015426, 0.014817, 1.5, -0.11558, -0.10277, 0.73876, -0.17134],vec![-0.98333, -0.57996, -1.2853, 0.33886, -0.1988, -0.45182, -0.77675, -0.029379, 0.78493, 0.19769, 0.51189, 0.022568, -0.28821, -1.7542, 0.89984, 0.061953, 0.83438, -0.90923, 0.66451, 1.6238, 0.38999, 5.9785, -0.4609, -0.20088, -0.68677, -0.32389, 0.8357, -1.3401, 0.2775, 1.098, 1.1921, -0.34736, 1.4013, -0.14822, 0.51985, 0.74047, -0.65057, -1.2892, 0.50526, 0.49827],vec![0.34275, -0.14792, 0.44832, 0.22104, 0.51224, -0.018295, 0.13739, 1.263, 1.1066, -0.3866, -0.19206, -0.23901, -0.33695, 0.37826, -0.64058, 0.69695, -0.24997, 1.8601, -0.16977, -0.68876, -0.53771, -0.4609, 3.9902, 0.28241, -0.15014, 0.72533, 0.21352, -0.24983, -0.57513, 0.091974, -1.7076, -0.30634, 0.047736, 0.28899, -0.18581, 0.12331, 0.032661, 1.6286, -0.25829, -0.11409],vec![-0.10271, -0.47794, 0.70036, -0.18968, 0.85316, -1.3906, -0.14335, 0.15157, -1.3024, -0.40809, -1.4979, -0.73185, -0.42656, -0.26989, 0.68694, -0.061894, -0.20787, -0.9169, -0.63353, -0.49229, -0.028184, -0.20088, 0.28241, 5.9681, 1.1163, 0.53407, -0.28591, 0.81449, -1.3978, -0.063728, -1.4545, 0.058456, -0.28935, -0.023142, 0.1229, -0.48363, 0.56742, 0.48249, -0.90111, -0.10053],vec![-1.7592, 0.33785, 0.41997, 0.29999, -0.7333, 0.93463, 0.25007, 0.87673, -1.0341, 0.65848, -1.7371, -0.76529, 0.26297, -1.8481, -0.31399, 0.19592, 0.53557, 0.75604, -0.66139, 0.13755, -0.37248, -0.68677, -0.15014, 1.1163, 5.6345, 0.60717, -0.54177, 1.8712, 0.84421, -1.2095, -1.5092, -0.33949, -0.50049, 0.1902, 0.06292, -0.75514, 0.56365, 0.23264, -0.74813, -0.13036],vec![0.077368, -0.5063, 0.28302, 0.081537, -0.26249, -0.96968, 0.41594, 0.18987, -0.31926, -0.26627, 0.1475, -1.19, 0.17397, -0.35258, 1.5374, 1.1201, 0.18704, -0.76076, 0.11428, 0.33656, -0.036921, -0.32389, 0.72533, 0.53407, 0.60717, 3.5774, -0.49643, -0.15822, -0.38755, 0.058695, -0.47606, 0.45801, -0.1739, -0.56734, 0.13491, 0.070256, 0.22139, -0.35102, -0.1023, -0.37573],vec![0.95339, 0.17221, -0.99377, 0.67772, -0.19259, -0.58609, 0.3111, 0.0066433, 1.3603, -0.61233, -0.29703, 1.4568, 0.58429, 1.104, -0.19488, 0.54276, 0.98762, -0.43362, 0.20654, -0.24923, -0.35855, 0.8357, 0.21352, -0.28591, -0.54177, -0.49643, 4.6897, -0.69376, 0.78202, 0.078286, 0.73885, -0.53794, 0.53371, -0.23186, -0.65277, -1.6593, 0.50107, -1.7937, 2.0076, -0.0022143],vec![-0.82134, 0.21627, -0.82446, -0.31571, 0.58316, -0.522, 0.64139, -0.13715, 0.40858, 0.40843, -0.36985, 0.36054, -1.6205, 0.25979, -0.81448, 0.36178, 0.030656, 1.5285, 0.30123, -1.5658, 0.7595, -1.3401, -0.24983, 0.81449, 1.8712, -0.15822, -0.69376, 8.2031, 2.1045, -0.90374, 0.60456, 0.068388, 0.35329, -0.46495, 0.79927, -0.23538, 1.2512, 3.1409, -0.30143, -0.44153],vec![0.26264, -0.016789, -0.86476, -0.38599, -0.67017, 0.92468, -0.50264, -0.81134, 0.29905, -0.72904, -0.015669, -0.25939, 0.29296, -1.0017, -1.0415, -0.51648, 0.77336, 0.59266, 0.46653, -0.07135, 2.2649, 0.2775, -0.57513, -1.3978, 0.84421, -0.38755, 0.78202, 2.1045, 3.981, -1.9719, 2.2918, 0.90351, 0.13032, 0.29607, 0.47959, -0.0095382, 1.5364, 0.63549, 1.2292, -0.3972],vec![0.40181, 0.090912, 0.2688, -0.19379, 1.2389, -0.63083, 0.60598, -0.20154, -1.5976, 0.80732, 1.2533, 0.069139, -0.96795, 0.79481, 0.52509, 0.35038, 0.23825, 0.22825, 0.38718, -0.77588, -1.9033, 1.098, 0.091974, -0.063728, -1.2095, 0.058695, 0.078286, -0.90374, -1.9719, 4.8917, 0.42637, -1.285, 0.97408, 0.16256, -0.048538, 1.252, -1.5883, -0.22844, 0.52286, -0.86775],vec![-0.11607, -0.10665, 0.50849, -0.61151, -0.8652, 1.3604, -0.38646, -0.14561, 0.033389, -0.027864, 1.3281, -0.45053, -0.16645, -1.1287, 0.13012, -0.17068, 0.57133, -1.1084, 0.97045, -1.8422, 1.3606, 1.1921, -1.7076, -1.4545, -1.5092, -0.47606, 0.73885, 0.60456, 2.2918, 0.42637, 7.2593, 1.7462, 0.37997, -0.23445, 0.069188, 0.54488, -0.11808, 0.080016, 1.0874, -0.3439],vec![0.75692, -0.8513, -0.055492, -0.73381, -0.3906, -0.37683, -0.78855, 0.22358, -0.55118, -0.51528, 0.59784, -0.013469, 0.18864, 0.24465, 0.58239, 1.8566, -0.61194, -1.1579, 0.97566, -1.1162, 1.4926, -0.34736, -0.30634, 0.058456, -0.33949, 0.45801, -0.53794, 0.068388, 0.90351, -1.285, 1.7462, 4.5806, -0.47325, -1.5166, -0.38172, -0.15983, -0.45776, 1.2696, 0.28333, 1.0279],vec![-0.59992, 0.081462, 0.58382, 0.76078, 0.15789, -0.62193, 1.0579, -0.70329, -0.74236, 0.88314, 0.80767, 1.2184, -0.72598, 0.82952, -0.02921, -0.16824, 0.69301, -0.14741, -0.34247, -0.070934, -0.30918, 1.4013, 0.047736, -0.28935, -0.50049, -0.1739, 0.53371, 0.35329, 0.13032, 0.97408, 0.37997, -0.47325, 4.6043, 0.10451, 0.99921, 0.82171, -0.43501, -0.32108, 1.0302, -0.081844],vec![-2.2112, 0.12068, 0.7785, 0.26996, -1.2246, 0.97355, 0.11235, -0.043377, -1.0886, -0.13851, -1.6996, -0.291, -0.45162, -0.67521, -1.4001, -1.6102, 0.91308, 1.4139, -1.6564, 0.78333, 0.0015426, -0.14822, 0.28899, -0.023142, 0.1902, -0.56734, -0.23186, -0.46495, 0.29607, 0.16256, -0.23445, -1.5166, 0.10451, 6.2711, 0.21381, 0.66746, 0.24797, 0.25262, -1.6428, -0.81232],vec![-1.2227, -0.013011, -0.97151, -0.10131, 0.25693, -0.44591, 0.79078, -0.8683, -0.75075, 0.33474, 0.46395, -0.85299, -1.5178, 0.038605, 0.0040083, -0.68502, 1.1016, 1.1122, 0.26091, -0.66627, 0.014817, 0.51985, -0.18581, 0.1229, 0.06292, 0.13491, -0.65277, 0.79927, 0.47959, -0.048538, 0.069188, -0.38172, 0.99921, 0.21381, 3.0483, 0.07978, -0.038087, 0.33253, -0.62841, -0.95425],vec![-0.11548, 0.022738, 0.32748, -0.97314, -0.26732, -1.0437, -0.077112, -0.53101, -1.7103, -0.0063588, -0.016865, -0.34257, 0.75485, 0.66232, 0.50052, -1.0879, -1.3959, -0.27894, 0.79021, 0.86689, 1.5, 0.74047, 0.12331, -0.48363, -0.75514, 0.070256, -1.6593, -0.23538, -0.0095382, 1.252, 0.54488, -0.15983, 0.82171, 0.66746, 0.07978, 5.411, -1.5451, -0.14458, 0.15773, -0.94144],vec![0.9009, -0.36462, 0.64943, 0.11195, 0.44652, 0.50315, -0.86875, -0.061152, 1.7831, -0.1582, -0.23272, 0.22772, 0.0067585, -2.4636, -0.80143, -1.9384, 0.20211, 0.56295, -0.4204, -0.82698, -0.11558, -0.65057, 0.032661, 0.56742, 0.56365, 0.22139, 0.50107, 1.2512, 1.5364, -1.5883, -0.11808, -0.45776, -0.43501, 0.24797, -0.038087, -1.5451, 6.2395, -0.38863, -0.97636, 0.048756],vec![-1.031, 0.50823, 0.27579, -0.0015116, -0.32449, 0.72265, -1.0034, -0.28731, -2.2047, 0.16171, 1.0766, -0.027525, -0.59075, -0.4976, -1.5362, 1.8785, 0.49325, 2.6417, -0.033092, -2.1166, -0.10277, -1.2892, 1.6286, 0.48249, 0.23264, -0.35102, -1.7937, 3.1409, 0.63549, -0.22844, 0.080016, 1.2696, -0.32108, 0.25262, 0.33253, -0.14458, -0.38863, 8.9826, 0.052085, 0.65006],vec![2.867, 0.17637, -1.8748, 0.64491, 1.0167, 0.55195, 0.42665, -0.72568, 0.12836, -0.67822, 1.1611, -0.073571, 0.79872, 2.0842, 0.050763, 1.4962, 0.16658, 0.095464, 0.79243, 1.2099, 0.73876, 0.50526, -0.25829, -0.90111, -0.74813, -0.1023, 2.0076, -0.30143, 1.2292, 0.52286, 1.0874, 0.28333, 1.0302, -1.6428, -0.62841, 0.15773, -0.97636, 0.052085, 5.8655, -1.0892],vec![-0.075066, 0.06144, 0.26054, -0.040869, 0.087245, 0.86353, 0.34769, 0.53113, 0.23091, 0.92448, -0.51233, 1.0437, -0.07872, -1.2389, 1.3379, 2.095, -0.23575, -1.5841, -0.054881, 0.12286, -0.17134, 0.49827, -0.11409, -0.10053, -0.13036, -0.37573, -0.0022143, -0.44153, -0.3972, -0.86775, -0.3439, 1.0279, -0.081844, -0.81232, -0.95425, -0.94144, 0.048756, 0.65006, -1.0892, 5.2777]],
        1e-3,
    );
}

#[test]
fn multiply_6() {
    let a = vec![
        vec![0.0, 0.0, 0.0, 0.0, 0.0],
        vec![0.0, 0.0, 0.0, 0.0, 0.0],
        vec![0.0, 0.0, 0.0, -1.0, 0.0],
        vec![0.0, 0.0, 0.0, 0.0, 0.0],
        vec![0.0, 0.0, 0.0, 0.0, 0.0],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b_sparse = rsparse::transpose(&a_sparse);

    let c = rsparse::multiply(&a_sparse, &b_sparse);

    utils::assert_eq_f2d_vec(
        &c.todense(),
        &vec![
            vec![0.0, 0.0, 0.0, 0.0, 0.0],
            vec![0.0, 0.0, 0.0, 0.0, 0.0],
            vec![0.0, 0.0, 1.0, 0.0, 0.0],
            vec![0.0, 0.0, 0.0, 0.0, 0.0],
            vec![0.0, 0.0, 0.0, 0.0, 0.0],
        ],
        1e-6,
    );
}

#[test]
fn add_1() {
    let a = vec![
        vec![2., 2., 4., 4., 1.],
        vec![3., 4., 5., 8., 3.],
        vec![2., 6., 3., 9., 3.],
        vec![5., 7., 6., 7., 1.],
        vec![7., 1., 8., 9., 2.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![
        vec![8., 8., 6., 6., 2.],
        vec![4., 9., 7., 5., 9.],
        vec![2., 3., 8., 4., 1.],
        vec![4., 7., 6., 8., 9.],
        vec![9., 1., 8., 7., 1.],
    ];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let r = vec![
        vec![10., 10., 10., 10., 3.],
        vec![7., 13., 12., 13., 12.],
        vec![4., 9., 11., 13., 4.],
        vec![9., 14., 12., 15., 10.],
        vec![16., 2., 16., 16., 3.],
    ];
    let mut r_sparse = rsparse::data::Sprs::new();
    r_sparse.from_vec(&r);

    // Check sparse vs sparse
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).x, r_sparse.x);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).i, r_sparse.i);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).p, r_sparse.p);

    // Check as dense
    assert_eq!(
        rsparse::add(&a_sparse, &b_sparse, 1., 1.).todense(),
        r_sparse.todense()
    );
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).todense(), r);

    // Check B+A
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).x, r_sparse.x);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).i, r_sparse.i);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).p, r_sparse.p);
    assert_eq!(
        rsparse::add(&b_sparse, &a_sparse, 1., 1.).todense(),
        r_sparse.todense()
    );
    assert_eq!(rsparse::add(&b_sparse, &a_sparse, 1., 1.).todense(), r);

    // Check 2A - A = A
    assert_eq!(
        rsparse::add(&a_sparse, &a_sparse, 2., -1.).todense(),
        a_sparse.todense()
    );
}

#[test]
fn add_2() {
    let a = vec![
        vec![2., 2., 4., 4., 1.],
        vec![3., 4., 5., 8., 3.],
        vec![2., 6., -3., 9., 3.],
        vec![5., 7., 6., 7., 1.],
        vec![7., 1., 8., 9., 2.],
    ];
    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);

    let b = vec![
        vec![8., 8., 6., 6., 2.],
        vec![4., 9., 7., 5., 9.],
        vec![2., 3., 8., 4., 1.],
        vec![4., 7., 6., 8., 9.],
        vec![9., 1., 8., 7., 1.],
    ];
    let mut b_sparse = rsparse::data::Sprs::new();
    b_sparse.from_vec(&b);

    let r = vec![
        vec![10., 10., 10., 10., 3.],
        vec![7., 13., 12., 13., 12.],
        vec![4., 9., 5., 13., 4.],
        vec![9., 14., 12., 15., 10.],
        vec![16., 2., 16., 16., 3.],
    ];
    let mut r_sparse = rsparse::data::Sprs::new();
    r_sparse.from_vec(&r);

    // Check sparse vs sparse
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).x, r_sparse.x);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).i, r_sparse.i);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).p, r_sparse.p);

    // Check as dense
    assert_eq!(
        rsparse::add(&a_sparse, &b_sparse, 1., 1.).todense(),
        r_sparse.todense()
    );
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).todense(), r);

    // Check B + A
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).x, r_sparse.x);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).i, r_sparse.i);
    assert_eq!(rsparse::add(&a_sparse, &b_sparse, 1., 1.).p, r_sparse.p);
    assert_eq!(
        rsparse::add(&b_sparse, &a_sparse, 1., 1.).todense(),
        r_sparse.todense()
    );
    assert_eq!(rsparse::add(&b_sparse, &a_sparse, 1., 1.).todense(), r);

    // Check 2A - A = A
    assert_eq!(
        rsparse::add(&a_sparse, &a_sparse, 2., -1.).todense(),
        a_sparse.todense()
    );

    // Check 2B - B = B
    assert_eq!(
        rsparse::add(&b_sparse, &b_sparse, 2., -1.).todense(),
        b_sparse.todense()
    );
}

#[test]
fn norm_1(){
    let a = vec![vec![0.947046, 0.107385, 0.414713, 0.829759, 0.184515, 0.915179],vec![0.731729, 0.256865, 0.57665, 0.808786, 0.975115, 0.853119],vec![0.241559, 0.76349, 0.561508, 0.726358, 0.418349, 0.089947],vec![0.056867, 0.612998, 0.933199, 0.834696, 0.831912, 0.077548],vec![0.080079, 0.350149, 0.930013, 0.482766, 0.808863, 0.152294],vec![0.486605, 0.215417, 0.446327, 0.737579, 0.141593, 0.472575]];

    let mut a_sparse = rsparse::data::Sprs::new();
    a_sparse.from_vec(&a);
    
    assert!(f64::abs(rsparse::norm(&a_sparse) - 4.4199) < 1e-3);
}