use rsparse;
mod utils;


#[test]
fn lsolve_1(){
    let l = vec![
        vec![1.0000,  0.,      0.,       0.,       0.,       0.,       0.,       0.,       0.,       0.],
        vec![0.4044,  1.0000,  0.,       0.,       0.,       0.,       0.,       0.,       0.,       0.],
        vec![0.3465,  0.0122,  1.0000,   0.,       0.,       0.,       0.,       0.,       0.,       0.],
        vec![0.7592, -0.3591, -0.1154,   1.0000,   0.,       0.,       0.,       0.,       0.,       0.],
        vec![0.6868,  0.1135,  0.2113,   0.6470,   1.0000,   0.,       0.,       0.,       0.,       0.],
        vec![0.7304, -0.1453,  0.1755,   0.0585,  -0.7586,   1.0000,   0.,       0.,       0.,       0.],
        vec![0.8362,  0.0732,  0.7601,  -0.1107,   0.1175,  -0.5406,   1.0000,   0.,       0.,       0.],
        vec![0.0390,  0.8993,  0.3428,   0.1639,   0.4246,  -0.5861,   0.7790,   1.0000,   0.,       0.],
        vec![0.8079, -0.4437,  0.8271,   0.2583,  -0.2238,   0.0544,   0.2360,  -0.7387,   1.0000,   0.],
        vec![0.1360,  0.9532, -0.1212,  -0.1943,   0.4311,   0.1069,   0.3717,   0.7176,  -0.6053,   1.0000]
    ];
    let mut l_sparse = rsparse::data::Sprs::new();
    l_sparse.from_vec(&l);

    let mut b = vec![
        0.8568,
        0.3219,
        0.9263,
        0.4635,
        0.8348,
        0.1339,
        0.8444,
        0.7000,
        0.7947,
        0.5552
    ];

    let x = vec![
         0.856803,
        -0.024615,
         0.629721,
        -0.123138,
         0.195778,
        -0.450195,
        -0.628933,
         0.636038,
         0.289215,
         0.430638
    ];

    rsparse::lsolve(&l_sparse, &mut b);

    utils::assert_eq_f_vec(&b, &x, 1e-3);
}

#[test]
fn ltsolve_1(){
    let l = vec![
        vec![1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        vec![0.3376, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        vec![0.8260, 0.2762, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        vec![0.5710, 0.1764, 0.5430, 1.0000, 0.0000, 0.0000, 0.0000],
        vec![0.9194, 0.3583, 0.6850, 0.6594, 1.0000, 0.0000, 0.0000],
        vec![0.2448, 0.5015, -0.2830, 0.2239, 0.4723, 1.0000, 0.0000],
        vec![0.2423, 0.2332, -0.8355, 0.7522, -0.3700, 0.1985, 1.0000]
    ];
    let mut l_sparse = rsparse::data::Sprs::new();
    l_sparse.from_vec(&l);

    let mut b = vec![
        0.444841,
        0.528773,
        0.988345,
        0.097749,
        0.996166,
        0.068040,
        0.844511
    ];

    let x = vec![ // l'\b
        -1.326867,
        -0.270323,
         1.502297,
        -1.409055,
         1.355645,
        -0.099585,
         0.844511
    ];

    rsparse::ltsolve(&l_sparse, &mut b);

    utils::assert_eq_f_vec(&b, &x, 1e-3);
}

#[test]
fn usolve_1(){
    let u =vec![    
        vec![0.7824, 0.4055, 0.0827, 0.9534, 0.9713, 0.1418, 0.0781],
        vec![0.0, 0.7766, 0.2981, 0.2307, -0.3172, 0.6819, 0.5979],
        vec![0.0, 0.0, 0.2986, -0.5576, 0.5928, -0.2759, -0.1672],
        vec![0.0, 0.0, 0.0, 0.6393, -0.4245, 0.1277, 0.5842],
        vec![0.0, 0.0, 0.0, 0.0, -1.277, 1.1435, 1.0631],
        vec![0.0, 0.0, 0.0, 0.0, 0.0, 1.2096, 0.7268],
        vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4574]
    ];
    let mut u_sparse = rsparse::data::Sprs::new();
    u_sparse.from_vec(&u);

    let mut b = vec![
        0.189772,
        0.055761,
        0.030676,
        0.181620,
        0.526924,
        0.744179,
        0.078005
    ];

    let x = vec![ // u\b
        -0.047146,
        -0.941265,
         1.158658,
         0.355142,
         0.088052,
         0.717684,
        -0.170555
    ];

    rsparse::usolve(&u_sparse, &mut b);

    utils::assert_eq_f_vec(&b, &x, 1e-3);
}

#[test]
fn utsolve_1(){
    let u =vec![    
        vec![0.9842, 0.1720, 0.9948, 0.2766, 0.4560, 0.1462, 0.8124],
        vec![0.0000, 0.6894, 0.1043, 0.4486, 0.5217, 0.7157, 0.4132],
        vec![0.0000, 0.0000, -0.5500, -0.2340, 0.0822, 0.2176, -0.1996],
        vec![0.0000, 0.0000, 0.0000, 0.6554, -0.1564, -0.0287, 0.2107],
        vec![0.0000, 0.0000, 0.0000, 0.0000, -0.4127, -0.4652, -0.6993],
        vec![0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6881, 0.3037],
        vec![0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, -0.7740]
    ];
    let mut u_sparse = rsparse::data::Sprs::new();
    u_sparse.from_vec(&u);

    let mut b = vec![
        0.444841,
        0.528773,
        0.988345,
        0.097749,
        0.996166,
        0.068040,
        0.844511
    ];

    let x = vec![ // u'\b
         0.4520,
         0.6542,
        -0.8554,
        -0.7947,
        -0.9565,
        -1.0870,
         0.1745
    ];

    rsparse::utsolve(&u_sparse, &mut b);

    utils::assert_eq_f_vec(&b, &x, 1e-3);
}